# -*- coding: utf-8 -*-

def hello(names)
  names.each do |name|
    puts "HELLO, #{name.upcase}", names, names.each
  end
end

rubies = ['MRI','jruby','rubinius']

hello(rubies)


if true
  puts 'Ping'
end

str = 'Ping'

if str
  puts str
end

if false
  puts 'Ping'
else
  puts 'Pong'
end

n = 2

if n.zero?
  puts '0でした'
elsif n.even?
  puts '偶数でした'
elsif n.odd?
  puts '奇数でした'
else
  puts 'わかりません'
end


val = 'Hello'

if true
  puts 'Hey'
end

puts val
4423

class MyClass
  def hello
    puts 'Hello, My object'
  end
end

my_object = MyClass.new
my_object.hello

class Ruler
  def length=(val)
    @length = val
  end
  def length
    @length
  end
end

ruler = Ruler.new
ruler.length=30
ruler.length

class Ruler2
  attr_accessor:length

  def initialize(length)
    self.length = length
  end

  def display_length
    puts length
  end

  def set_length
    self.length=30
  end
end

ruler2 = Ruler2.new(100)

puts "initialize length: "
ruler2.display_length

ruler2.length= 40

puts "ruler2.length : #{ruler2.length} "


ruler2.display_length


ruler2.set_length

puts ruler2.length

class Ruler3
  attr_accessor:length

  def self.pair
    [Ruler3.new, Ruler3.new]
  end
end

puts Ruler3.pair

class MyClass_cvar
  @@cvar = 'Hello,My class variable!'

  def cvar_in_method
    puts @@cvar
  end

  def self.cvar_in_class_method
    puts @@cvar
  end
end

my_object = MyClass_cvar.new

my_object.cvar_in_method
MyClass_cvar.cvar_in_class_method

class Parent
  def hello
    puts 'Hello, Parent class'
    end
end

class Child < Parent
  def hello
    super
    puts 'hello, override parent hello method'
  end

  def hi
    puts 'Hello, Child class'
  end
end

child = Child.new
child.hello
child.hi

if
    p
else
  p
end

while
    p
end

# timesメソッド　繰り返す回数.times do
#               繰り返す処理
#               end

100.times do
  puts  "iterator!!"
end

names = {"a","b","c"}

print "definition of the first name is ", names[0] "\n"

p names.size


address = {names: "hogehoge" , yomigana:"ほげほげ" , postal:"1234-567"}

